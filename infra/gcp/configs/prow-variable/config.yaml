plank:
  job_url_prefix_config:
    '*': https://PROW_FQDN/view/
  pod_pending_timeout: 15m
  pod_unscheduled_timeout: 5m
  default_decoration_configs:
    '*':
      timeout: 2h
      grace_period: 15m
      utility_images:
        clonerefs: "gcr.io/k8s-prow/clonerefs:v20220331-c4e1c201d5"
        initupload: "gcr.io/k8s-prow/initupload:v20220331-c4e1c201d5"
        entrypoint: "gcr.io/k8s-prow/entrypoint:v20220331-c4e1c201d5"
        sidecar: "gcr.io/k8s-prow/sidecar:v20220331-c4e1c201d5"
      gcs_configuration:
        bucket: GCS_BUCKET
        path_strategy: "explicit"
      gcs_credentials_secret: "gcs-credentials"
      resources:
        clonerefs:
          requests:
            cpu: 100m
        initupload:
          requests:
            cpu: 100m
        place_entrypoint:
          requests:
            cpu: 100m
        sidecar:
          requests:
            cpu: 100m

sinker:
  resync_period: 1m
  max_prowjob_age: 48h
  max_pod_age: 48h
  terminated_pod_ttl: 30m

deck:
  spyglass:
    size_limit: 100000000 # 100MB
    gcs_browser_prefix: https://console.cloud.google.com/storage/browser/
    lenses:
    - lens:
        name: metadata
      required_files:
      - ^(?:started|finished)\.json$
      optional_files:
      - ^(?:podinfo|prowjob)\.json$
    - lens:
        name: buildlog
        config:
          highlight_regexes:
          - timed out
          - "ERROR:"
          - (FAIL|Failure \[)\b
          - panic\b
          - ^E\d{4} \d\d:\d\d:\d\d\.\d\d\d]
          # This highlights the start of bazel tests/runs to skip go importing noise.
          - "^INFO: Analyzed \\d+ targets"
      required_files:
        - ^.*build-log\.txt$
    - lens:
        name: junit
      required_files:
        - ^artifacts(/.*/|/)junit.*\.xml$ # https://regex101.com/r/vCSegS/1
    - lens:
        name: coverage
      required_files:
        - ^artifacts/filtered\.cov$
      optional_files:
        - ^artifacts/filtered\.html$
    - lens:
        name: podinfo
      required_files:
        - ^podinfo\.json$
    - lens:
        name: links
      required_files:
        - artifacts/.*\.link\.txt
  tide_update_period: 1s


prowjob_namespace: prow
pod_namespace: test-pods
log_level: debug

tide:
  sync_period: 2m
  queries:
  - orgs:
    - GITHUB_ORG
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge
    - do-not-merge/contains-merge-commits
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/work-in-progress
    - needs-rebase

  pr_status_base_urls:
    '*': https://PROW_FQDN/pr
  blocker_label: tide/merge-blocker
  squash_label: tide/merge-method-squash
  rebase_label: tide/merge-method-rebase
  merge_label: tide/merge-method-merge
  priority:
  - labels: [ "kind/flake", "priority/critical-urgent" ]
  - labels: [ "kind/failing-test", "priority/critical-urgent" ]
  - labels: [ "kind/bug", "priority/critical-urgent" ]

push_gateway:
  endpoint: pushgateway
  serve_metrics: true

github_reporter:
  job_types_to_report:
  - presubmit
  - postsubmit

presets:
# docker-in-docker preset
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  - name: docker-graph
    emptyDir: {}
  - name: docker-root
    emptyDir: {}
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
# AWS ECR registry creds
- labels:
    preset-registry-credentials: "true"
  env:
  - name: REGISTRY_ENABLED
    value: "true"
  - name: REGISTRY_USERNAME
    value: /etc/registry-username/username
  - name: REGISTRY_PASSWORD
    value: /etc/registry-password/password
  volumes:
  - name: registry-username
    secret:
      defaultMode: 0400
      secretName: registry-username
  - name: registry-password
    secret:
      defaultMode: 0400
      secretName: registry-password
  volumeMounts:
  - name: registry-username
    mountPath: /etc/registry-username
    readOnly: true
  - name: registry-password
    mountPath: /etc/registry-password
    readOnly: true
# AWS credentials
- labels:
    preset-aws-credentials: "true"
  env:
  - name: AWS_ACCESS_KEY_ID
    value: /etc/aws-access-key-id/aws-access-key-id
  - name: AWS_SECRET_ACCESS_KEY
    value: /etc/aws-access-key-secret/aws-access-key-secret
  volumes:
  - name: aws-access-key-id
    secret:
      defaultMode: 0400
      secretName: aws-access-key-id
  - name: aws-access-key-secret
    secret:
      defaultMode: 0400
      secretName: aws-access-key-secret
  volumeMounts:
  - name: aws-access-key-id
    mountPath: /etc/aws-access-key-id
    readOnly: true
  - name: aws-access-key-secret
    mountPath: /etc/aws-access-key-secret
    readOnly: true
